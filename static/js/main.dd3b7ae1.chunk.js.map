{"version":3,"sources":["Square.js","Gameboard.js","App.js","index.js"],"names":["Square","props","handleClick","bind","evt","this","toggleLight","coord","className","isOn","id","onClick","Component","Gameboard","renderNewGame","state","gameboard","moves","hasWon","game","i","rows","row","j","cols","push","Math","random","randLightsOn","pos","split","map","Number","toggleSquare","Promise","resolve","reject","every","col","setState","key","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"6VAmBeA,G,wBAfb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFH,E,yEAINC,GACVC,KAAKJ,MAAMK,YAAYD,KAAKJ,MAAMM,S,+BAGlC,OACE,yBAAKC,WAA+B,IAApBH,KAAKJ,MAAMQ,KAAgB,wBAA0B,SAAUC,GAAIL,KAAKJ,MAAMM,MAAOI,QAASN,KAAKH,kB,GAVpGU,cCCfC,E,YAQJ,WAAYZ,GAAO,IAAD,8BAChB,4CAAMA,KACDa,cAAgB,EAAKA,cAAcX,KAAnB,gBACrB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAEnB,EAAKY,MAAQ,CACTC,UAAW,EAAKF,gBAChBG,MAAO,EACPC,QAAQ,GARI,E,6EAehB,IADA,IAAIC,EAAO,GACHC,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,KAAMD,IAAI,CAEtC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIlB,KAAKJ,MAAMuB,KAAMD,IAClCD,EAAIG,KAAKC,KAAKC,SAAWtB,KAAKJ,MAAM2B,cAEtCT,EAAKM,KAAKH,GAEZ,OAAOH,I,kCAGGU,GAAK,IAAD,EACKxB,KAAKJ,MAAnBoB,EADS,EACTA,KAAMG,EADG,EACHA,KACPR,EAAYX,KAAKU,MAAMC,UAFb,EAGDa,EAAIC,MAAM,KAAKC,IAAIC,QAHlB,mBAGTZ,EAHS,KAGNG,EAHM,KAKd,SAASU,EAAab,EAAGG,GACpBA,GAAK,GAAKA,EAAIC,GAAQJ,GAAK,GAAKA,EAAIC,GAAK,IAAIa,SAAQ,SAACC,EAASC,GAChEpB,EAAUI,GAAGG,IAAMP,EAAUI,GAAGG,MAIpCU,EAAab,EAAGG,GAChBU,EAAab,EAAI,EAAGG,GACpBU,EAAab,EAAI,EAAGG,GACpBU,EAAab,EAAGG,EAAI,GACpBU,EAAab,EAAGG,EAAI,GAEpB,IAAIL,EAASF,EAAUqB,OAAM,SAAAf,GAAG,OAAIA,EAAIe,OAAM,SAAAC,GAAG,OAAKA,QAEtDjC,KAAKkC,SAAS,CAACvB,YAAWE,SAAQD,MAAOZ,KAAKU,MAAME,MAAQ,M,+BAK5D,IADA,IAAID,EAAY,GACRI,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,KAAMD,IAAI,CAEtC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIlB,KAAKJ,MAAMuB,KAAMD,IAAI,CACtC,IAAIM,EAAG,UAAMT,EAAN,YAAWG,GAClBD,EAAIG,KAAK,kBAAC,EAAD,CAAQe,IAAKX,EAAKpB,KAAMJ,KAAKU,MAAMC,UAAUI,GAAGG,GAAIjB,YAAaD,KAAKC,YAAaC,MAAOsB,KAErGb,EAAUS,KAAK,yBAAKjB,UAAU,iBAAiBgC,IAAKpB,GAAIE,IAE1D,OACE,yBAAKd,UAAU,aACb,wBAAIA,UAAU,sBAAd,cACA,uBAAGA,UAAU,mBAAb,UAAuCH,KAAKU,MAAME,OAClD,yBAAKT,UAAU,+BACZQ,Q,GAtEaJ,aAAlBC,EACG4B,aAAe,CACpBpB,KAAM,EACNG,KAAM,EACNI,aAAc,IAyEHf,QCrEA6B,MARf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,QCFNmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dd3b7ae1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Square.css';\n\nclass Square extends Component {\n  constructor(props){\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(evt){\n    this.props.toggleLight(this.props.coord);\n  }\n  render(){\n    return(\n      <div className={this.props.isOn === true ? 'Square Square--lit-up' : 'Square'} id={this.props.coord} onClick={this.handleClick}>\n      </div>\n    )\n  }\n}\n\nexport default Square;\n","import React, { Component } from 'react';\nimport './Gameboard.css';\nimport Square from './Square.js';\n\nclass Gameboard extends Component {\n  static defaultProps = {\n    rows: 5,\n    cols: 5,\n    randLightsOn: 0.20\n  };\n\n\n  constructor(props){\n    super(props);\n    this.renderNewGame = this.renderNewGame.bind(this)\n    this.toggleLight = this.toggleLight.bind(this);\n\n    this.state = {\n        gameboard: this.renderNewGame(),\n        moves: 0,\n        hasWon: false\n      }\n  }\n\n\n  renderNewGame() {\n    let game = [];\n    for(let i = 0; i < this.props.rows; i++){\n      let row = [];\n      for(let j = 0; j < this.props.cols; j++){\n        row.push(Math.random() < this.props.randLightsOn)\n      }\n      game.push(row)\n    }\n    return game;\n  }\n\n  toggleLight(pos){\n    let {rows, cols} = this.props;\n    let gameboard = this.state.gameboard;\n    let [i, j] = pos.split('-').map(Number);\n\n    function toggleSquare(i, j){\n      if(j >= 0 && j < cols && i >= 0 && i < rows)new Promise((resolve, reject) => {\n        gameboard[i][j] = !gameboard[i][j];\n      })\n    }\n\n    toggleSquare(i, j) // Flip clicked cell\n    toggleSquare(i + 1, j) // Flip above cell\n    toggleSquare(i - 1, j) // Flip below cell\n    toggleSquare(i, j + 1) // Flip right cell\n    toggleSquare(i, j - 1) // Flip left cell\n\n    let hasWon = gameboard.every(row => row.every(col => !col));\n\n    this.setState({gameboard, hasWon, moves: this.state.moves + 1})\n  }\n\n  render(){\n    let gameboard = [];\n    for(let i = 0; i < this.props.rows; i++){\n      let row = [];\n      for(let j = 0; j < this.props.cols; j++){\n        let pos = `${i}-${j}`;\n        row.push(<Square key={pos} isOn={this.state.gameboard[i][j]} toggleLight={this.toggleLight} coord={pos}/>)\n      }\n      gameboard.push(<div className=\"Gameboard--row\" key={i}>{row}</div>)\n    }\n    return (\n      <div className=\"Gameboard\">\n        <h1 className=\"Gameboard--heading\">Lights Out</h1>\n        <p className=\"Gameboard--text\">Moves: {this.state.moves}</p>\n        <div className=\"Gameboard--square-container\">\n          {gameboard}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Gameboard;\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './Gameboard.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}